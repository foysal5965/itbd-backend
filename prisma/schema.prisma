// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  password           String
  role               UserRole
  needPasswordChange Boolean             @default(true)
  status             UserStatus          @default(ACTIVE)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  admin              Admin?
  Student            Student?
  ContestPerticipent ContestPerticipent?

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  address       String?
  bio           String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [email], references: [email])

  @@map("admins")
}

model Student {
  id            String  @id @default(uuid())
  name          String
  email         String  @unique
  profilePhoto  String?
  contactNumber String

  isDeleted             Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  user                  User                    @relation(fields: [email], references: [email])
  StudentEnrolledCourse StudentEnrolledCourse[]
  StudentResult         StudentResult[]

  @@map("students")
}

model CourseCategory {
  id           String   @id @default(uuid())
  categoryName String
  image        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Course       Course[]

  @@map("categories")
}

model Course {
  id                    String                  @id @default(uuid())
  courseName            String
  duration              String
  lectures              Int
  projects              Int
  image                 String?
  courseOverView        String
  courseCurriculum      String[]
  courseFee             Int
  categoryId            String
  category              CourseCategory          @relation(fields: [categoryId], references: [id])
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  StudentEnrolledCourse StudentEnrolledCourse[]
  exams                 Exam[]

  @@map("courses")
}

model StudentEnrolledCourse {
  id            String        @id @default(uuid())
  studentId     String
  student       Student       @relation(fields: [studentId], references: [id])
  courseId      String
  course        Course        @relation(fields: [courseId], references: [id])
  paymentStatus PaymentStatus @default(UNPAID)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Payment       Payment?

  @@map("student_enrolled_courses")
}

model Payment {
  id                    String                @id @default(uuid())
  enrolledCourseId      String                @unique
  studentEnrolledCourse StudentEnrolledCourse @relation(fields: [enrolledCourseId], references: [id])
  amount                Float
  transactionId         String                @unique
  status                PaymentStatus         @default(UNPAID)
  paymentGatewayData    Json?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  @@map("payments")
}

model Exam {
  id            String          @id @default(uuid())
  title         String
  courseId      String
  time          Int // Store time in minutes or seconds
  status        ExamStatus      @default(DRAFT)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  course        Course          @relation(fields: [courseId], references: [id])
  questions     Question[]
  StudentResult StudentResult[]

  @@map("exams")
}

model Question {
  id            String   @id @default(uuid())
  questionNo    Int      @default(autoincrement())
  questionText  String
  image         String?
  examId        String
  correctOption String // Nullable, since there might not be a correct option immediately
  exam          Exam     @relation(fields: [examId], references: [id])
  options       Option[] // A question has many options,
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("questions")
}

model Option {
  id         String   @id @default(uuid())
  optionId   Int      @default(autoincrement())
  optionText String
  questionId String
  question   Question @relation(fields: [questionId], references: [id]) // This defines the relation to the Question model
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("options")
}

model StudentResult {
  id        String   @id @default(uuid())
  examId    String
  exam      Exam     @relation(fields: [examId], references: [id])
  score     Int
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("student_results")
}

model Contest {
  id                 String               @id @default(uuid()) // Primary Key
  name               String // Contest name
  description        String? // Contest description
  startTime          DateTime // Contest start time
  endTime            DateTime // Contest end time
  rules              String? // Rules for the contest
  rewards            String? // Rewards for winners
  createdAt          DateTime             @default(now()) // Auto-generated creation timestamp
  updatedAt          DateTime             @updatedAt // Auto-generated last update timestamp
  ContestPerticipent ContestPerticipent[]

  @@map("contests")
}

model ContestPerticipent {
  id               String        @id @default(uuid()) // Primary Key
  name             String
  email            String        @unique
  isStudent        IsStudent     @default(YES)
  jobExperience    JobExperience @default(NONE)
  tShirtSize       TShirtSize    @default(L)
  image            String?
  permissionLetter String?
  instituteName    String 
  user             User          @relation(fields: [email], references: [email])
  contestId        String
  contests         Contest       @relation(fields: [contestId], references: [id])
  createdAt        DateTime      @default(now()) // Auto-generated creation timestamp
  updatedAt        DateTime      @updatedAt

  @@map("contestPerticipents")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  STUDENT
  CONTESTPERTICIPENT
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  MALE
  FEMALE
}

enum PaymentStatus {
  PAID
  UNPAID
}

enum ExamStatus {
  DRAFT
  PUBLISHED
  ACTIVE
  CLOSED
}

enum IsStudent {
  YES
  NO
}

enum TShirtSize {
  S
  M
  L
  XL
  XXL
}

enum JobExperience {
  NONE // 0 months
  ONE_TO_SIX // 1-6 months
  SIX_TO_TWELVE // 6-12 months
  MORE_THAN_TWELVE // More than 12 months
}
